plugins {
  id "dev.architectury.loom" version "1.7-SNAPSHOT"
  id "maven-publish"
}

base {
  archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

java {
  toolchain.languageVersion = JavaLanguageVersion.of(17)
}

def generatedResources = file("src/generated")
loom {
  silentMojangMappingsLicense()

  runs {
    register("dev") {
      vmArgs "-XX:+AllowEnhancedClassRedefinition", "-XX:+AllowRedefinitionToAddDeleteMethods -Dgeckolib.disable_examples=true"
      client()
    }
    register("dev2") {
//            vmArgs "-XX:+AllowEnhancedClassRedefinition", "-XX:+AllowRedefinitionToAddDeleteMethods -Dgeckolib.disable_examples=true"
      programArgs "--username", "Dev2"
      client()
    }
    register("dev-server") {
      vmArgs "-XX:+AllowEnhancedClassRedefinition", "-XX:+AllowRedefinitionToAddDeleteMethods -Dgeckolib.disable_examples=true"
      server()
    }
    data {
      data()
      programArgs "--all", "--mod", mod_id
      programArgs "--output", generatedResources.absolutePath
    }
  }

  forge {
    mixinConfigs = [
        "${mod_id}.mixins.json"
    ]
    //
    // accessWidenerPath = file("src/main/resources/template.accesswidener")
    // missing access transformers?
    // don't worry, you can still use them!
    // note that your AT *MUST* be located at
    // src/main/resources/META-INF/accesstransformer.cfg
    // to work as there is currently no config option to change this.
    // also, any names used in your access transformer will need to be
    // in SRG mapped ("func_" / "field_" with MCP class names) to work!
    // (both of these things may be subject to change in the future)
  }
}

repositories {
  maven {
    url "https://cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  }
  maven {
    name = 'ParchmentMC'
    url = 'https://maven.parchmentmc.org'
  }
  maven { url = "https://maven.architectury.dev" }
}

dependencies {
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  forge "net.minecraftforge:forge:${project.forge_version}"
  // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2" // Just in case I need them in the future
  // mappings loom.officialMojangMappings()
  mappings loom.layered() {
    officialMojangMappings()
    parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:2023.09.03@zip")
  }

  // Lombok my best friend
  compileOnly 'org.projectlombok:lombok:1.18.32'
  annotationProcessor 'org.projectlombok:lombok:1.18.32'

  // MixinExtras a great Mixin addition
  compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
  implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))
}

processResources {
  // define properties that can be used during resource processing
  inputs.property "version", project.version

  filesMatching("META-INF/mods.toml") {
    expand "version": project.version
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.release = 17
}

java {
  withSourcesJar()
}

sourceSets {
  main {
    resources.srcDir generatedResources
  }
}

jar {
  // add some additional metadata to the jar manifest
  manifest {
    attributes([
        "Specification-Title"     : project.mod_id,
        "Specification-Vendor"    : project.mod_author,
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : version,
        "Implementation-Vendor"   : project.mod_author,
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}
